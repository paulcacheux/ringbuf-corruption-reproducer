package main

import (
	"context"
	"errors"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -type event bpf reproducer.c -- -I./headers

func main() {
	// Subscribe to signals for terminating the program.
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.Events)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	ctx, cancel := context.WithCancel(context.Background())

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stopper

		cancel()

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	for i := 0; i < 16; i++ {
		go func() {
			buf := make([]byte, 32)
			for {
				select {
				case <-ctx.Done():
					return
				default:
					_, _, err := objs.RingbufFiller.Test(buf)
					if err != nil {
						log.Printf("test failed: %s", err)
					}
				}
			}
		}()
	}

	log.Println("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	var counter uint64
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}
		counter++
		if counter%200000 == 0 {
			log.Printf("received %d events", counter)
		}

		for _, b := range record.RawSample {
			if int(b) != len(record.RawSample) {
				log.Fatalf("corruption detected: %+v", event.Payload)
			}
		}
	}
}
